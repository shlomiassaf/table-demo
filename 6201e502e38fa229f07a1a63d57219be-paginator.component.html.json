[{"file":"paginator.component.md","lang":"html","section":"ex-1","code":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">usePagination</span>\n            <span class=\"token attr-name\">blockUi</span>\n            <span class=\"token attr-name\">vScrollNone</span>\n            <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>clientSideDS<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid-paginator</span> <span class=\"token attr-name\">*pblNgridPaginatorRef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[table]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[paginator]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table.ds.paginator<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid-paginator</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div>"},{"file":"paginator.component.md","lang":"html","section":"ex-2","code":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">usePagination</span>\n            <span class=\"token attr-name\">blockUi</span>\n            <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pageNumberDS<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid-paginator</span> <span class=\"token attr-name\">*pblNgridPaginatorRef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[table]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[paginator]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table.ds.paginator<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid-paginator</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div>"},{"file":"paginator.component.md","lang":"html","section":"ex-3","code":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">usePagination</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>token<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">blockUi</span>\n            <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tokenDS<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>columns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid-paginator</span> <span class=\"token attr-name\">*pblNgridPaginatorRef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>let table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[table]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span>\n                        <span class=\"token attr-name\">[paginator]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table.ds.paginator<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid-paginator</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div>"},{"file":"paginator.component.md","lang":"html","section":"ex-4","code":"<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid</span> <span class=\"token attr-name\">usePagination</span>\n            <span class=\"token attr-name\">blockUi</span>\n            <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>footerRowDS<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[columns]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>columnsPaginatorAsFooter<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">[stickyFooter]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[0]<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n            <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">*pblNgridFooterCellTypeDef</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">'</span>PAGINATOR<span class=\"token punctuation\">'</span>; table as table<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\">\n        <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span> <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-end<span class=\"token punctuation\">;</span> <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>pbl-ngrid-paginator</span> <span class=\"token attr-name\">[table]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table<span class=\"token punctuation\">\"</span></span>\n                          <span class=\"token attr-name\">[paginator]</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>table.ds.paginator<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid-paginator</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>pbl-ngrid</span><span class=\"token punctuation\">></span></span></code></pre></div>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-1","code":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">import { from as rxFrom } from &#39;rxjs&#39;;\nimport { map } from &#39;rxjs/operators&#39;;\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from &#39;@angular/core&#39;;\n\nimport { createDS, columnFactory, PblTokenPaginator } from &#39;@pebula/ngrid&#39;;\nimport { Person, DemoDataSource } from &#39;@pebula/apps/ngrid/shared&#39;;\n\nconst COLUMNS = columnFactory()\n  .default({minWidth: 100})\n  .table(\n    { prop: &#39;id&#39;, sort: true, width: &#39;40px&#39; },\n    { prop: &#39;name&#39;, sort: true },\n    { prop: &#39;gender&#39;, width: &#39;50px&#39; },\n    { prop: &#39;birthdate&#39;, type: &#39;date&#39; }\n  )\n  .footer(\n    { id: &#39;PAGINATOR&#39;, type: &#39;PAGINATOR&#39; },\n  )\n  .build();\n\nfunction emulateServerSidePageNumberPaginationCall(datasource: DemoDataSource, page: number, perPage: number) {\n  return rxFrom(datasource.getPeople(500, 5000)).pipe(map( data =&gt; {\n    const start = (page - 1) * perPage;\n    const end = Math.min(data.length, start + perPage);\n    return {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\nfunction emulateServerSideTokenPaginationCall(datasource: DemoDataSource, tokenOrPerPage: string | number) {\n  const createToken = (page: number, perPage: number) =&gt; btoa(JSON.stringify({ page, perPage }));\n\n  if (typeof tokenOrPerPage === &#39;string&#39;) {\n    const instructions: { page: number, perPage: number } = JSON.parse(atob(tokenOrPerPage));\n    const { page, perPage } = instructions;\n    return emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( result =&gt; ({ token: createToken(page + 1, perPage), data: result.data }) )\n    );\n  } else {\n    const token = createToken(2, tokenOrPerPage);\n    return emulateServerSidePageNumberPaginationCall(datasource, 1, tokenOrPerPage).pipe(\n      map( result =&gt; ({ token, data: result.data }) )\n    );\n  }\n}\n\n@Component({\n  selector: &#39;pbl-paginator-grid-example-component&#39;,\n  templateUrl: &#39;./paginator.component.html&#39;,\n  styleUrls: [&#39;./paginator.component.scss&#39;],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorGridExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table.cols).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(1000, 5000) ).create();\n\n  pageNumberDS = createDS&lt;Person&gt;().onTrigger( event =&gt; {\n    const { page, perPage } = this.pageNumberDS.paginator;\n    // emulate HTTP call with server side pagination instructions\n    return emulateServerSidePageNumberPaginationCall(this.datasource, page, perPage).pipe(\n      map( result =&gt; {\n        event.updateTotalLength(result.total);\n        return result.data;\n      })\n    );\n  })\n  .setCustomTriggers(&#39;pagination&#39;)\n  .create();\n\n  tokenDS = createDS&lt;Person&gt;()\n    .onTrigger( event =&gt; {\n      const { pagination } = event;\n      let pageChanged: string;\n      if (pagination.page.changed) {\n        pageChanged = pagination.page.curr;\n      }\n      if (!pageChanged) {\n        this.tokenDS.paginator.reset();\n      }\n      const { perPage } = this.tokenDS.paginator;\n      // emulate HTTP call with server side pagination instructions\n      return emulateServerSideTokenPaginationCall(this.datasource, pageChanged || perPage).pipe(\n        map( result =&gt; {\n          if (result.token) {\n            const paginator: PblTokenPaginator = &lt;any&gt; this.tokenDS.paginator;\n            paginator.addNext(result.token);\n          }\n          event.updateTotalLength(result.data.length);\n          return result.data;\n        })\n      );\n    })\n    .setCustomTriggers(&#39;pagination&#39;)\n    .create();\n\n  footerRowDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(0, 20) ).create();\n\n  constructor(private datasource: DemoDataSource) { }\n}\n</code></pre></div>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-2","code":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">import { from as rxFrom } from &#39;rxjs&#39;;\nimport { map } from &#39;rxjs/operators&#39;;\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from &#39;@angular/core&#39;;\n\nimport { createDS, columnFactory, PblTokenPaginator } from &#39;@pebula/ngrid&#39;;\nimport { Person, DemoDataSource } from &#39;@pebula/apps/ngrid/shared&#39;;\n\nconst COLUMNS = columnFactory()\n  .default({minWidth: 100})\n  .table(\n    { prop: &#39;id&#39;, sort: true, width: &#39;40px&#39; },\n    { prop: &#39;name&#39;, sort: true },\n    { prop: &#39;gender&#39;, width: &#39;50px&#39; },\n    { prop: &#39;birthdate&#39;, type: &#39;date&#39; }\n  )\n  .footer(\n    { id: &#39;PAGINATOR&#39;, type: &#39;PAGINATOR&#39; },\n  )\n  .build();\n\nfunction emulateServerSidePageNumberPaginationCall(datasource: DemoDataSource, page: number, perPage: number) {\n  return rxFrom(datasource.getPeople(500, 5000)).pipe(map( data =&gt; {\n    const start = (page - 1) * perPage;\n    const end = Math.min(data.length, start + perPage);\n    return {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\nfunction emulateServerSideTokenPaginationCall(datasource: DemoDataSource, tokenOrPerPage: string | number) {\n  const createToken = (page: number, perPage: number) =&gt; btoa(JSON.stringify({ page, perPage }));\n\n  if (typeof tokenOrPerPage === &#39;string&#39;) {\n    const instructions: { page: number, perPage: number } = JSON.parse(atob(tokenOrPerPage));\n    const { page, perPage } = instructions;\n    return emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( result =&gt; ({ token: createToken(page + 1, perPage), data: result.data }) )\n    );\n  } else {\n    const token = createToken(2, tokenOrPerPage);\n    return emulateServerSidePageNumberPaginationCall(datasource, 1, tokenOrPerPage).pipe(\n      map( result =&gt; ({ token, data: result.data }) )\n    );\n  }\n}\n\n@Component({\n  selector: &#39;pbl-paginator-grid-example-component&#39;,\n  templateUrl: &#39;./paginator.component.html&#39;,\n  styleUrls: [&#39;./paginator.component.scss&#39;],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorGridExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table.cols).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(1000, 5000) ).create();\n\n  pageNumberDS = createDS&lt;Person&gt;().onTrigger( event =&gt; {\n    const { page, perPage } = this.pageNumberDS.paginator;\n    // emulate HTTP call with server side pagination instructions\n    return emulateServerSidePageNumberPaginationCall(this.datasource, page, perPage).pipe(\n      map( result =&gt; {\n        event.updateTotalLength(result.total);\n        return result.data;\n      })\n    );\n  })\n  .setCustomTriggers(&#39;pagination&#39;)\n  .create();\n\n  tokenDS = createDS&lt;Person&gt;()\n    .onTrigger( event =&gt; {\n      const { pagination } = event;\n      let pageChanged: string;\n      if (pagination.page.changed) {\n        pageChanged = pagination.page.curr;\n      }\n      if (!pageChanged) {\n        this.tokenDS.paginator.reset();\n      }\n      const { perPage } = this.tokenDS.paginator;\n      // emulate HTTP call with server side pagination instructions\n      return emulateServerSideTokenPaginationCall(this.datasource, pageChanged || perPage).pipe(\n        map( result =&gt; {\n          if (result.token) {\n            const paginator: PblTokenPaginator = &lt;any&gt; this.tokenDS.paginator;\n            paginator.addNext(result.token);\n          }\n          event.updateTotalLength(result.data.length);\n          return result.data;\n        })\n      );\n    })\n    .setCustomTriggers(&#39;pagination&#39;)\n    .create();\n\n  footerRowDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(0, 20) ).create();\n\n  constructor(private datasource: DemoDataSource) { }\n}\n</code></pre></div>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-3","code":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">import { from as rxFrom } from &#39;rxjs&#39;;\nimport { map } from &#39;rxjs/operators&#39;;\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from &#39;@angular/core&#39;;\n\nimport { createDS, columnFactory, PblTokenPaginator } from &#39;@pebula/ngrid&#39;;\nimport { Person, DemoDataSource } from &#39;@pebula/apps/ngrid/shared&#39;;\n\nconst COLUMNS = columnFactory()\n  .default({minWidth: 100})\n  .table(\n    { prop: &#39;id&#39;, sort: true, width: &#39;40px&#39; },\n    { prop: &#39;name&#39;, sort: true },\n    { prop: &#39;gender&#39;, width: &#39;50px&#39; },\n    { prop: &#39;birthdate&#39;, type: &#39;date&#39; }\n  )\n  .footer(\n    { id: &#39;PAGINATOR&#39;, type: &#39;PAGINATOR&#39; },\n  )\n  .build();\n\nfunction emulateServerSidePageNumberPaginationCall(datasource: DemoDataSource, page: number, perPage: number) {\n  return rxFrom(datasource.getPeople(500, 5000)).pipe(map( data =&gt; {\n    const start = (page - 1) * perPage;\n    const end = Math.min(data.length, start + perPage);\n    return {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\nfunction emulateServerSideTokenPaginationCall(datasource: DemoDataSource, tokenOrPerPage: string | number) {\n  const createToken = (page: number, perPage: number) =&gt; btoa(JSON.stringify({ page, perPage }));\n\n  if (typeof tokenOrPerPage === &#39;string&#39;) {\n    const instructions: { page: number, perPage: number } = JSON.parse(atob(tokenOrPerPage));\n    const { page, perPage } = instructions;\n    return emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( result =&gt; ({ token: createToken(page + 1, perPage), data: result.data }) )\n    );\n  } else {\n    const token = createToken(2, tokenOrPerPage);\n    return emulateServerSidePageNumberPaginationCall(datasource, 1, tokenOrPerPage).pipe(\n      map( result =&gt; ({ token, data: result.data }) )\n    );\n  }\n}\n\n@Component({\n  selector: &#39;pbl-paginator-grid-example-component&#39;,\n  templateUrl: &#39;./paginator.component.html&#39;,\n  styleUrls: [&#39;./paginator.component.scss&#39;],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorGridExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table.cols).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(1000, 5000) ).create();\n\n  pageNumberDS = createDS&lt;Person&gt;().onTrigger( event =&gt; {\n    const { page, perPage } = this.pageNumberDS.paginator;\n    // emulate HTTP call with server side pagination instructions\n    return emulateServerSidePageNumberPaginationCall(this.datasource, page, perPage).pipe(\n      map( result =&gt; {\n        event.updateTotalLength(result.total);\n        return result.data;\n      })\n    );\n  })\n  .setCustomTriggers(&#39;pagination&#39;)\n  .create();\n\n  tokenDS = createDS&lt;Person&gt;()\n    .onTrigger( event =&gt; {\n      const { pagination } = event;\n      let pageChanged: string;\n      if (pagination.page.changed) {\n        pageChanged = pagination.page.curr;\n      }\n      if (!pageChanged) {\n        this.tokenDS.paginator.reset();\n      }\n      const { perPage } = this.tokenDS.paginator;\n      // emulate HTTP call with server side pagination instructions\n      return emulateServerSideTokenPaginationCall(this.datasource, pageChanged || perPage).pipe(\n        map( result =&gt; {\n          if (result.token) {\n            const paginator: PblTokenPaginator = &lt;any&gt; this.tokenDS.paginator;\n            paginator.addNext(result.token);\n          }\n          event.updateTotalLength(result.data.length);\n          return result.data;\n        })\n      );\n    })\n    .setCustomTriggers(&#39;pagination&#39;)\n    .create();\n\n  footerRowDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(0, 20) ).create();\n\n  constructor(private datasource: DemoDataSource) { }\n}\n</code></pre></div>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-4","code":"<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">import { from as rxFrom } from &#39;rxjs&#39;;\nimport { map } from &#39;rxjs/operators&#39;;\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation } from &#39;@angular/core&#39;;\n\nimport { createDS, columnFactory, PblTokenPaginator } from &#39;@pebula/ngrid&#39;;\nimport { Person, DemoDataSource } from &#39;@pebula/apps/ngrid/shared&#39;;\n\nconst COLUMNS = columnFactory()\n  .default({minWidth: 100})\n  .table(\n    { prop: &#39;id&#39;, sort: true, width: &#39;40px&#39; },\n    { prop: &#39;name&#39;, sort: true },\n    { prop: &#39;gender&#39;, width: &#39;50px&#39; },\n    { prop: &#39;birthdate&#39;, type: &#39;date&#39; }\n  )\n  .footer(\n    { id: &#39;PAGINATOR&#39;, type: &#39;PAGINATOR&#39; },\n  )\n  .build();\n\nfunction emulateServerSidePageNumberPaginationCall(datasource: DemoDataSource, page: number, perPage: number) {\n  return rxFrom(datasource.getPeople(500, 5000)).pipe(map( data =&gt; {\n    const start = (page - 1) * perPage;\n    const end = Math.min(data.length, start + perPage);\n    return {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\nfunction emulateServerSideTokenPaginationCall(datasource: DemoDataSource, tokenOrPerPage: string | number) {\n  const createToken = (page: number, perPage: number) =&gt; btoa(JSON.stringify({ page, perPage }));\n\n  if (typeof tokenOrPerPage === &#39;string&#39;) {\n    const instructions: { page: number, perPage: number } = JSON.parse(atob(tokenOrPerPage));\n    const { page, perPage } = instructions;\n    return emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( result =&gt; ({ token: createToken(page + 1, perPage), data: result.data }) )\n    );\n  } else {\n    const token = createToken(2, tokenOrPerPage);\n    return emulateServerSidePageNumberPaginationCall(datasource, 1, tokenOrPerPage).pipe(\n      map( result =&gt; ({ token, data: result.data }) )\n    );\n  }\n}\n\n@Component({\n  selector: &#39;pbl-paginator-grid-example-component&#39;,\n  templateUrl: &#39;./paginator.component.html&#39;,\n  styleUrls: [&#39;./paginator.component.scss&#39;],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginatorGridExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table.cols).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(1000, 5000) ).create();\n\n  pageNumberDS = createDS&lt;Person&gt;().onTrigger( event =&gt; {\n    const { page, perPage } = this.pageNumberDS.paginator;\n    // emulate HTTP call with server side pagination instructions\n    return emulateServerSidePageNumberPaginationCall(this.datasource, page, perPage).pipe(\n      map( result =&gt; {\n        event.updateTotalLength(result.total);\n        return result.data;\n      })\n    );\n  })\n  .setCustomTriggers(&#39;pagination&#39;)\n  .create();\n\n  tokenDS = createDS&lt;Person&gt;()\n    .onTrigger( event =&gt; {\n      const { pagination } = event;\n      let pageChanged: string;\n      if (pagination.page.changed) {\n        pageChanged = pagination.page.curr;\n      }\n      if (!pageChanged) {\n        this.tokenDS.paginator.reset();\n      }\n      const { perPage } = this.tokenDS.paginator;\n      // emulate HTTP call with server side pagination instructions\n      return emulateServerSideTokenPaginationCall(this.datasource, pageChanged || perPage).pipe(\n        map( result =&gt; {\n          if (result.token) {\n            const paginator: PblTokenPaginator = &lt;any&gt; this.tokenDS.paginator;\n            paginator.addNext(result.token);\n          }\n          event.updateTotalLength(result.data.length);\n          return result.data;\n        })\n      );\n    })\n    .setCustomTriggers(&#39;pagination&#39;)\n    .create();\n\n  footerRowDS = createDS&lt;Person&gt;().onTrigger( () =&gt; this.datasource.getPeople(0, 20) ).create();\n\n  constructor(private datasource: DemoDataSource) { }\n}</code></pre></div>"}]
