[{"file":"paginator.component.md","lang":"html","section":"ex-1","code":"  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table</span> <span class=\"hljs-attr\">usePagination</span>\n            <span class=\"hljs-attr\">blockUi</span>\n            [<span class=\"hljs-attr\">dataSource</span>]=<span class=\"hljs-string\">\"clientSideDS\"</span>\n            [<span class=\"hljs-attr\">columns</span>]=<span class=\"hljs-string\">\"columns\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 300px\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table-paginator</span> *<span class=\"hljs-attr\">negTablePaginatorRef</span>=<span class=\"hljs-string\">\"let table\"</span>\n                        [<span class=\"hljs-attr\">table</span>]=<span class=\"hljs-string\">\"table\"</span>\n                        [<span class=\"hljs-attr\">paginator</span>]=<span class=\"hljs-string\">\"table.dataSource.paginator\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table-paginator</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table</span>&gt;</span>"},{"file":"paginator.component.md","lang":"html","section":"ex-2","code":"  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table</span> <span class=\"hljs-attr\">usePagination</span>\n            <span class=\"hljs-attr\">blockUi</span>\n            [<span class=\"hljs-attr\">dataSource</span>]=<span class=\"hljs-string\">\"pageNumberDS\"</span>\n            [<span class=\"hljs-attr\">columns</span>]=<span class=\"hljs-string\">\"columns\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table-paginator</span> *<span class=\"hljs-attr\">negTablePaginatorRef</span>=<span class=\"hljs-string\">\"let table\"</span>\n                        [<span class=\"hljs-attr\">table</span>]=<span class=\"hljs-string\">\"table\"</span>\n                        [<span class=\"hljs-attr\">paginator</span>]=<span class=\"hljs-string\">\"table.dataSource.paginator\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 300px\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table-paginator</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table</span>&gt;</span>"},{"file":"paginator.component.md","lang":"html","section":"ex-3","code":"  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table</span> <span class=\"hljs-attr\">usePagination</span>=<span class=\"hljs-string\">\"token\"</span>\n            <span class=\"hljs-attr\">blockUi</span>\n            [<span class=\"hljs-attr\">dataSource</span>]=<span class=\"hljs-string\">\"tokenDS\"</span>\n            [<span class=\"hljs-attr\">columns</span>]=<span class=\"hljs-string\">\"columns\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 300px\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table-paginator</span> *<span class=\"hljs-attr\">negTablePaginatorRef</span>=<span class=\"hljs-string\">\"let table\"</span>\n                        [<span class=\"hljs-attr\">table</span>]=<span class=\"hljs-string\">\"table\"</span>\n                        [<span class=\"hljs-attr\">paginator</span>]=<span class=\"hljs-string\">\"table.dataSource.paginator\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table-paginator</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table</span>&gt;</span>"},{"file":"paginator.component.md","lang":"html","section":"ex-4","code":"  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table</span> <span class=\"hljs-attr\">usePagination</span>\n            <span class=\"hljs-attr\">blockUi</span>\n            [<span class=\"hljs-attr\">dataSource</span>]=<span class=\"hljs-string\">\"footerRowDS\"</span>\n            [<span class=\"hljs-attr\">columns</span>]=<span class=\"hljs-string\">\"columnsPaginatorAsFooter\"</span>\n            [<span class=\"hljs-attr\">stickyFooter</span>]=<span class=\"hljs-string\">\"[0]\"</span>\n            <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"background: transparent\"</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"height: 300px\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> *<span class=\"hljs-attr\">negTableFooterCellTypeDef</span>=<span class=\"hljs-string\">\"'PAGINATOR'; table as table\"</span>\n        <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"display: flex; justify-content: flex-end; width: 100%;\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">neg-table-paginator</span> [<span class=\"hljs-attr\">table</span>]=<span class=\"hljs-string\">\"table\"</span>\n                          [<span class=\"hljs-attr\">paginator</span>]=<span class=\"hljs-string\">\"table.dataSource.paginator\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table-paginator</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">neg-table</span>&gt;</span>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-1","code":"<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">as</span> rxFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n<span class=\"hljs-keyword\">import</span> { ChangeDetectionStrategy, Component, ViewEncapsulation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> { createDS, columnFactory, NegTokenPaginator } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/table'</span>;\n<span class=\"hljs-keyword\">import</span> { Person, DemoDataSource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/demo-apps/shared'</span>;\n\n<span class=\"hljs-keyword\">const</span> COLUMNS = columnFactory()\n  .default({minWidth: <span class=\"hljs-number\">100</span>})\n  .table(\n    { prop: <span class=\"hljs-string\">'id'</span>, sort: <span class=\"hljs-literal\">true</span>, width: <span class=\"hljs-string\">'40px'</span> },\n    { prop: <span class=\"hljs-string\">'name'</span>, sort: <span class=\"hljs-literal\">true</span> },\n    { prop: <span class=\"hljs-string\">'gender'</span>, width: <span class=\"hljs-string\">'50px'</span> },\n    { prop: <span class=\"hljs-string\">'birthdate'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'date'</span> }\n  )\n  .footer(\n    { id: <span class=\"hljs-string\">'PAGINATOR'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'PAGINATOR'</span> },\n  )\n  .build();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSidePageNumberPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rxFrom(datasource.getPeople(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">5000</span>)).pipe(map( <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> start = (page - <span class=\"hljs-number\">1</span>) * perPage;\n    <span class=\"hljs-keyword\">const</span> end = <span class=\"hljs-built_in\">Math</span>.min(data.length, start + perPage);\n    <span class=\"hljs-keyword\">return</span> {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSideTokenPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, tokenOrPerPage: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> createToken = <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> btoa(<span class=\"hljs-built_in\">JSON</span>.stringify({ page, perPage }));\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tokenOrPerPage === <span class=\"hljs-string\">'string'</span>) {\n    <span class=\"hljs-keyword\">const</span> instructions: { page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span> } = <span class=\"hljs-built_in\">JSON</span>.parse(atob(tokenOrPerPage));\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = instructions;\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token: createToken(page + <span class=\"hljs-number\">1</span>, perPage), data: result.data }) )\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">const</span> token = createToken(<span class=\"hljs-number\">2</span>, tokenOrPerPage);\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, <span class=\"hljs-number\">1</span>, tokenOrPerPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token, data: result.data }) )\n    );\n  }\n}\n\n<span class=\"hljs-meta\">@Component</span>({\n  selector: <span class=\"hljs-string\">'neg-paginator-table-example-component'</span>,\n  templateUrl: <span class=\"hljs-string\">'./paginator.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./paginator.component.scss'</span>],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> PaginatorTableExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">1000, 5000</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">pageNumberDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = <span class=\"hljs-keyword\">this</span>.pageNumberDS.paginator;\n    <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, page, perPage</span>).pipe(<span class=\"hljs-params\">\n      map(<span class=\"hljs-params\"> result =&gt; {\n        event.updateTotalLength(<span class=\"hljs-params\">result.total</span>);\n        <span class=\"hljs-keyword\">return</span> result.data;\n      }</span>)\n    </span>);\n  }</span>)\n  .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n  .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">tokenDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>\n    .<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n      <span class=\"hljs-keyword\">const</span> { pagination } = event;\n      <span class=\"hljs-keyword\">let</span> pageChanged: <span class=\"hljs-built_in\">string</span>;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">pagination.page.changed</span>) {\n        pageChanged = pagination.page.curr;\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">!pageChanged</span>) {\n        <span class=\"hljs-keyword\">this</span>.tokenDS.paginator.reset(<span class=\"hljs-params\"></span>);\n      }\n      <span class=\"hljs-keyword\">const</span> { perPage } = <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n      <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n      <span class=\"hljs-keyword\">return</span> emulateServerSideTokenPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, pageChanged || perPage</span>).pipe(<span class=\"hljs-params\">\n        map(<span class=\"hljs-params\"> result =&gt; {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">result.token</span>) {\n            <span class=\"hljs-keyword\">const</span> paginator: NegTokenPaginator = &lt;<span class=\"hljs-built_in\">any</span>&gt; <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n            paginator.addNext(<span class=\"hljs-params\">result.token</span>);\n          }\n          event.updateTotalLength(<span class=\"hljs-params\">result.data.length</span>);\n          <span class=\"hljs-keyword\">return</span> result.data;\n        }</span>)\n      </span>);\n    }</span>)\n    .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n    .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">footerRowDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">0, 20</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> datasource: DemoDataSource</span>) { }\n}\n</span>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-2","code":"<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">as</span> rxFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n<span class=\"hljs-keyword\">import</span> { ChangeDetectionStrategy, Component, ViewEncapsulation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> { createDS, columnFactory, NegTokenPaginator } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/table'</span>;\n<span class=\"hljs-keyword\">import</span> { Person, DemoDataSource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/demo-apps/shared'</span>;\n\n<span class=\"hljs-keyword\">const</span> COLUMNS = columnFactory()\n  .default({minWidth: <span class=\"hljs-number\">100</span>})\n  .table(\n    { prop: <span class=\"hljs-string\">'id'</span>, sort: <span class=\"hljs-literal\">true</span>, width: <span class=\"hljs-string\">'40px'</span> },\n    { prop: <span class=\"hljs-string\">'name'</span>, sort: <span class=\"hljs-literal\">true</span> },\n    { prop: <span class=\"hljs-string\">'gender'</span>, width: <span class=\"hljs-string\">'50px'</span> },\n    { prop: <span class=\"hljs-string\">'birthdate'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'date'</span> }\n  )\n  .footer(\n    { id: <span class=\"hljs-string\">'PAGINATOR'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'PAGINATOR'</span> },\n  )\n  .build();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSidePageNumberPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rxFrom(datasource.getPeople(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">5000</span>)).pipe(map( <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> start = (page - <span class=\"hljs-number\">1</span>) * perPage;\n    <span class=\"hljs-keyword\">const</span> end = <span class=\"hljs-built_in\">Math</span>.min(data.length, start + perPage);\n    <span class=\"hljs-keyword\">return</span> {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSideTokenPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, tokenOrPerPage: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> createToken = <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> btoa(<span class=\"hljs-built_in\">JSON</span>.stringify({ page, perPage }));\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tokenOrPerPage === <span class=\"hljs-string\">'string'</span>) {\n    <span class=\"hljs-keyword\">const</span> instructions: { page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span> } = <span class=\"hljs-built_in\">JSON</span>.parse(atob(tokenOrPerPage));\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = instructions;\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token: createToken(page + <span class=\"hljs-number\">1</span>, perPage), data: result.data }) )\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">const</span> token = createToken(<span class=\"hljs-number\">2</span>, tokenOrPerPage);\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, <span class=\"hljs-number\">1</span>, tokenOrPerPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token, data: result.data }) )\n    );\n  }\n}\n\n<span class=\"hljs-meta\">@Component</span>({\n  selector: <span class=\"hljs-string\">'neg-paginator-table-example-component'</span>,\n  templateUrl: <span class=\"hljs-string\">'./paginator.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./paginator.component.scss'</span>],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> PaginatorTableExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">1000, 5000</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">pageNumberDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = <span class=\"hljs-keyword\">this</span>.pageNumberDS.paginator;\n    <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, page, perPage</span>).pipe(<span class=\"hljs-params\">\n      map(<span class=\"hljs-params\"> result =&gt; {\n        event.updateTotalLength(<span class=\"hljs-params\">result.total</span>);\n        <span class=\"hljs-keyword\">return</span> result.data;\n      }</span>)\n    </span>);\n  }</span>)\n  .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n  .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">tokenDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>\n    .<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n      <span class=\"hljs-keyword\">const</span> { pagination } = event;\n      <span class=\"hljs-keyword\">let</span> pageChanged: <span class=\"hljs-built_in\">string</span>;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">pagination.page.changed</span>) {\n        pageChanged = pagination.page.curr;\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">!pageChanged</span>) {\n        <span class=\"hljs-keyword\">this</span>.tokenDS.paginator.reset(<span class=\"hljs-params\"></span>);\n      }\n      <span class=\"hljs-keyword\">const</span> { perPage } = <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n      <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n      <span class=\"hljs-keyword\">return</span> emulateServerSideTokenPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, pageChanged || perPage</span>).pipe(<span class=\"hljs-params\">\n        map(<span class=\"hljs-params\"> result =&gt; {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">result.token</span>) {\n            <span class=\"hljs-keyword\">const</span> paginator: NegTokenPaginator = &lt;<span class=\"hljs-built_in\">any</span>&gt; <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n            paginator.addNext(<span class=\"hljs-params\">result.token</span>);\n          }\n          event.updateTotalLength(<span class=\"hljs-params\">result.data.length</span>);\n          <span class=\"hljs-keyword\">return</span> result.data;\n        }</span>)\n      </span>);\n    }</span>)\n    .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n    .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">footerRowDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">0, 20</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> datasource: DemoDataSource</span>) { }\n}\n</span>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-3","code":"<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">as</span> rxFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n<span class=\"hljs-keyword\">import</span> { ChangeDetectionStrategy, Component, ViewEncapsulation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> { createDS, columnFactory, NegTokenPaginator } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/table'</span>;\n<span class=\"hljs-keyword\">import</span> { Person, DemoDataSource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/demo-apps/shared'</span>;\n\n<span class=\"hljs-keyword\">const</span> COLUMNS = columnFactory()\n  .default({minWidth: <span class=\"hljs-number\">100</span>})\n  .table(\n    { prop: <span class=\"hljs-string\">'id'</span>, sort: <span class=\"hljs-literal\">true</span>, width: <span class=\"hljs-string\">'40px'</span> },\n    { prop: <span class=\"hljs-string\">'name'</span>, sort: <span class=\"hljs-literal\">true</span> },\n    { prop: <span class=\"hljs-string\">'gender'</span>, width: <span class=\"hljs-string\">'50px'</span> },\n    { prop: <span class=\"hljs-string\">'birthdate'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'date'</span> }\n  )\n  .footer(\n    { id: <span class=\"hljs-string\">'PAGINATOR'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'PAGINATOR'</span> },\n  )\n  .build();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSidePageNumberPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rxFrom(datasource.getPeople(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">5000</span>)).pipe(map( <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> start = (page - <span class=\"hljs-number\">1</span>) * perPage;\n    <span class=\"hljs-keyword\">const</span> end = <span class=\"hljs-built_in\">Math</span>.min(data.length, start + perPage);\n    <span class=\"hljs-keyword\">return</span> {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSideTokenPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, tokenOrPerPage: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> createToken = <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> btoa(<span class=\"hljs-built_in\">JSON</span>.stringify({ page, perPage }));\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tokenOrPerPage === <span class=\"hljs-string\">'string'</span>) {\n    <span class=\"hljs-keyword\">const</span> instructions: { page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span> } = <span class=\"hljs-built_in\">JSON</span>.parse(atob(tokenOrPerPage));\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = instructions;\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token: createToken(page + <span class=\"hljs-number\">1</span>, perPage), data: result.data }) )\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">const</span> token = createToken(<span class=\"hljs-number\">2</span>, tokenOrPerPage);\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, <span class=\"hljs-number\">1</span>, tokenOrPerPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token, data: result.data }) )\n    );\n  }\n}\n\n<span class=\"hljs-meta\">@Component</span>({\n  selector: <span class=\"hljs-string\">'neg-paginator-table-example-component'</span>,\n  templateUrl: <span class=\"hljs-string\">'./paginator.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./paginator.component.scss'</span>],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> PaginatorTableExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">1000, 5000</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">pageNumberDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = <span class=\"hljs-keyword\">this</span>.pageNumberDS.paginator;\n    <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, page, perPage</span>).pipe(<span class=\"hljs-params\">\n      map(<span class=\"hljs-params\"> result =&gt; {\n        event.updateTotalLength(<span class=\"hljs-params\">result.total</span>);\n        <span class=\"hljs-keyword\">return</span> result.data;\n      }</span>)\n    </span>);\n  }</span>)\n  .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n  .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">tokenDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>\n    .<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n      <span class=\"hljs-keyword\">const</span> { pagination } = event;\n      <span class=\"hljs-keyword\">let</span> pageChanged: <span class=\"hljs-built_in\">string</span>;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">pagination.page.changed</span>) {\n        pageChanged = pagination.page.curr;\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">!pageChanged</span>) {\n        <span class=\"hljs-keyword\">this</span>.tokenDS.paginator.reset(<span class=\"hljs-params\"></span>);\n      }\n      <span class=\"hljs-keyword\">const</span> { perPage } = <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n      <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n      <span class=\"hljs-keyword\">return</span> emulateServerSideTokenPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, pageChanged || perPage</span>).pipe(<span class=\"hljs-params\">\n        map(<span class=\"hljs-params\"> result =&gt; {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">result.token</span>) {\n            <span class=\"hljs-keyword\">const</span> paginator: NegTokenPaginator = &lt;<span class=\"hljs-built_in\">any</span>&gt; <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n            paginator.addNext(<span class=\"hljs-params\">result.token</span>);\n          }\n          event.updateTotalLength(<span class=\"hljs-params\">result.data.length</span>);\n          <span class=\"hljs-keyword\">return</span> result.data;\n        }</span>)\n      </span>);\n    }</span>)\n    .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n    .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">footerRowDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">0, 20</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> datasource: DemoDataSource</span>) { }\n}\n</span>"},{"file":"paginator.component.ts","lang":"ts","section":"ex-4","code":"<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">as</span> rxFrom } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs'</span>;\n<span class=\"hljs-keyword\">import</span> { map } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'rxjs/operators'</span>;\n<span class=\"hljs-keyword\">import</span> { ChangeDetectionStrategy, Component, ViewEncapsulation } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/core'</span>;\n\n<span class=\"hljs-keyword\">import</span> { createDS, columnFactory, NegTokenPaginator } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/table'</span>;\n<span class=\"hljs-keyword\">import</span> { Person, DemoDataSource } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@neg/demo-apps/shared'</span>;\n\n<span class=\"hljs-keyword\">const</span> COLUMNS = columnFactory()\n  .default({minWidth: <span class=\"hljs-number\">100</span>})\n  .table(\n    { prop: <span class=\"hljs-string\">'id'</span>, sort: <span class=\"hljs-literal\">true</span>, width: <span class=\"hljs-string\">'40px'</span> },\n    { prop: <span class=\"hljs-string\">'name'</span>, sort: <span class=\"hljs-literal\">true</span> },\n    { prop: <span class=\"hljs-string\">'gender'</span>, width: <span class=\"hljs-string\">'50px'</span> },\n    { prop: <span class=\"hljs-string\">'birthdate'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'date'</span> }\n  )\n  .footer(\n    { id: <span class=\"hljs-string\">'PAGINATOR'</span>, <span class=\"hljs-keyword\">type</span>: <span class=\"hljs-string\">'PAGINATOR'</span> },\n  )\n  .build();\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSidePageNumberPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> rxFrom(datasource.getPeople(<span class=\"hljs-number\">500</span>, <span class=\"hljs-number\">5000</span>)).pipe(map( <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> start = (page - <span class=\"hljs-number\">1</span>) * perPage;\n    <span class=\"hljs-keyword\">const</span> end = <span class=\"hljs-built_in\">Math</span>.min(data.length, start + perPage);\n    <span class=\"hljs-keyword\">return</span> {\n      total: data.length,\n      data: data.slice(start, end)\n    }\n  }));\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">emulateServerSideTokenPaginationCall</span>(<span class=\"hljs-params\">datasource: DemoDataSource, tokenOrPerPage: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>) </span>{\n  <span class=\"hljs-keyword\">const</span> createToken = <span class=\"hljs-function\">(<span class=\"hljs-params\">page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span></span>) =&gt;</span> btoa(<span class=\"hljs-built_in\">JSON</span>.stringify({ page, perPage }));\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> tokenOrPerPage === <span class=\"hljs-string\">'string'</span>) {\n    <span class=\"hljs-keyword\">const</span> instructions: { page: <span class=\"hljs-built_in\">number</span>, perPage: <span class=\"hljs-built_in\">number</span> } = <span class=\"hljs-built_in\">JSON</span>.parse(atob(tokenOrPerPage));\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = instructions;\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, page, perPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token: createToken(page + <span class=\"hljs-number\">1</span>, perPage), data: result.data }) )\n    );\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">const</span> token = createToken(<span class=\"hljs-number\">2</span>, tokenOrPerPage);\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(datasource, <span class=\"hljs-number\">1</span>, tokenOrPerPage).pipe(\n      map( <span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =&gt;</span> ({ token, data: result.data }) )\n    );\n  }\n}\n\n<span class=\"hljs-meta\">@Component</span>({\n  selector: <span class=\"hljs-string\">'neg-paginator-table-example-component'</span>,\n  templateUrl: <span class=\"hljs-string\">'./paginator.component.html'</span>,\n  styleUrls: [<span class=\"hljs-string\">'./paginator.component.scss'</span>],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> PaginatorTableExampleComponent {\n\n  columns = columnFactory().table(...COLUMNS.table).build();\n  columnsPaginatorAsFooter = COLUMNS;\n  clientSideDS = createDS&lt;Person&gt;<span class=\"hljs-function\"><span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">1000, 5000</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">pageNumberDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n    <span class=\"hljs-keyword\">const</span> { page, perPage } = <span class=\"hljs-keyword\">this</span>.pageNumberDS.paginator;\n    <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n    <span class=\"hljs-keyword\">return</span> emulateServerSidePageNumberPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, page, perPage</span>).pipe(<span class=\"hljs-params\">\n      map(<span class=\"hljs-params\"> result =&gt; {\n        event.updateTotalLength(<span class=\"hljs-params\">result.total</span>);\n        <span class=\"hljs-keyword\">return</span> result.data;\n      }</span>)\n    </span>);\n  }</span>)\n  .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n  .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">tokenDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>\n    .<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> event =&gt; {\n      <span class=\"hljs-keyword\">const</span> { pagination } = event;\n      <span class=\"hljs-keyword\">let</span> pageChanged: <span class=\"hljs-built_in\">string</span>;\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">pagination.page.changed</span>) {\n        pageChanged = pagination.page.curr;\n      }\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">!pageChanged</span>) {\n        <span class=\"hljs-keyword\">this</span>.tokenDS.paginator.reset(<span class=\"hljs-params\"></span>);\n      }\n      <span class=\"hljs-keyword\">const</span> { perPage } = <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n      <span class=\"hljs-comment\">// emulate HTTP call with server side pagination instructions</span>\n      <span class=\"hljs-keyword\">return</span> emulateServerSideTokenPaginationCall(<span class=\"hljs-params\"><span class=\"hljs-keyword\">this</span>.datasource, pageChanged || perPage</span>).pipe(<span class=\"hljs-params\">\n        map(<span class=\"hljs-params\"> result =&gt; {\n          <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-params\">result.token</span>) {\n            <span class=\"hljs-keyword\">const</span> paginator: NegTokenPaginator = &lt;<span class=\"hljs-built_in\">any</span>&gt; <span class=\"hljs-keyword\">this</span>.tokenDS.paginator;\n            paginator.addNext(<span class=\"hljs-params\">result.token</span>);\n          }\n          event.updateTotalLength(<span class=\"hljs-params\">result.data.length</span>);\n          <span class=\"hljs-keyword\">return</span> result.data;\n        }</span>)\n      </span>);\n    }</span>)\n    .<span class=\"hljs-params\">setCustomTriggers</span>(<span class=\"hljs-params\">'pagination'</span>)\n    .<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">footerRowDS</span> = <span class=\"hljs-params\">createDS</span>&lt;<span class=\"hljs-params\">Person</span>&gt;<span class=\"hljs-params\">()</span>.<span class=\"hljs-params\">onTrigger</span>(<span class=\"hljs-params\"> (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-keyword\">this</span>.datasource.getPeople(<span class=\"hljs-params\">0, 20</span>) </span>).<span class=\"hljs-params\">create</span><span class=\"hljs-params\">()</span>;\n\n  <span class=\"hljs-params\">constructor</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">private</span> datasource: DemoDataSource</span>) { }\n}</span>"}]
